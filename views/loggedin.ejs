<!DOCTYPE html>
<html>
<head>
  <title>Eloquence</title>
  <link rel="shortcut icon" href="favicon.ico"  type="image/x-icon" />
  
  <!-- JQuery and Styles-->
  <link href="stylesheets/bootstrap.css" rel="stylesheet">
  <link href="stylesheets/style.css" rel="stylesheet">
  <script src="//code.jquery.com/jquery-1.11.1.js"></script>

  <!-- Redactor -->
  <link rel="stylesheet" href="redactor/redactor.css" />
  <script src="redactor/redactor.min.js"></script>

  <script type="text/javascript">
   $(document).ready(
    function()
    {
     $('#redactor').redactor();
   }
   );
 </script>
</head>
<body>

  <!-- Nav -->
  <nav class="navbar navbar-inverse">
    <div class="container-fluid">
      <div class="navbar-header">
        <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-2">
          <span class="sr-only">Toggle navigation</span>
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
        </button>
        <a class="navbar-brand" href="#"><em>Eloquence</em></a>
      </div>

      <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-2">
        <ul class="nav navbar-nav">
          <li class="dropdown">
            <a href="#" id="compList" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-expanded="false">My Compositions <span class="caret"></span></a>
            <ul id="compListDropdown" class="dropdown-menu" role="menu">
              <!--<li class="divider"></li>-->
            </ul>
          </li>
          <li><a href="#" data-toggle="modal" data-target="#createComposition"><strong>+</strong> <span class="sr-only">(current)</span></a></li>
        </ul>
        <ul class="nav navbar-nav navbar-right">
          <li><a href="#" data-toggle="modal" data-target="#about">About </a></li>
          <li><a href="/profile">Profile </a></li>
        </ul>
      </div>
    </div>
  </nav>

  <!-- Title bar -->
  <div class="form-group">
    <div id="compositiontitle" class="input-group">
      <span class="input-group-addon">Title</span>
      <input id="renameField" type="text" class="form-control">
      <span class="input-group-btn">
        <button class="btn btn-danger" type="button" data-toggle="modal" data-target="#deleteComposition">Delete</button>
      </span>
    </div>
  </div>

  <!-- Redactor -->
  <textarea id="redactor" class="14255" name="content">

  </textarea>

  <!-- Modals -->
  <div class="modal" id="about">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
          <h4 class="modal-title">About</h4>
        </div>
        <form class="codeblock" action="">
          <div class="modal-body">
            <h6>Welcome to Eloquence! Eloquence is a single page web application built for creative writing. It supports logging in using a variety of social media sites as well as local login. Eloquence allows you to write, edit, and format compositions and then store them for later! It was built using Node.js, Express, and MongoDB, and is designed to be sleek, fast, and modern. It was developed by Chandler Freeman(<a href="//www.chandlerfreeman.com">chandlerfreeman.com</a>). Thanks for using Eloquence!</h6>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
          </div>
        </form>
      </div>
    </div>
  </div>
  <div class="modal" id="createComposition">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
          <h4 class="modal-title">New Composition</h4>
        </div>
        <form class="createCompositionForm" action="">
          <div class="modal-body">
            <div class="form-group">
              <div id="compositiontitle" class="input-group">
                <span class="input-group-addon">Title</span>
                <input type="text" id="newTitle" class="form-control">
              </div>
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            <button type="submit" class="btn btn-primary">Create</button>
          </div>
        </form>
      </div>
    </div>
  </div>
  <div class="modal" id="deleteComposition">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
          <h4 class="modal-title">Delete Composition</h4>
        </div>
        <form class="deleteCompositionForm" action="">
          <div class="modal-body">
            <div class="form-group">
              <div id="compositiontitle" class="input-group">
                <h4>Are you sure you want to delete this composition?</h4>
              </div>
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            <button type="submit" class="btn btn-danger">Delete</button>
          </div>
        </form>
      </div>
    </div>
  </div>
</body>

<!-- Include Bootstrap JS -->
<script src="javascripts/bootstrap.min.js"></script>
<script>

  // Used to eliminate redundant autosaves
  var cached_text = '';
  var cached_title = '';
  var current_text = '';
  var current_title = '';

  // ID of the current composition
  var currentComposition = '';

    // Hide the inputs on page load
    $(document).ready(function(){
      $('#compositiontitle').hide();
      $('.redactor_box').hide();
    });

    // Updates the current composition
    function updateCurrentComposition(newCurrentComposition) {
      currentComposition = newCurrentComposition;

      // Only show inputs if composition is loaded
      if (currentComposition) {
        $('#compositiontitle').show();
        $('.redactor_box').show();
      }
      else {
        $('#compositiontitle').hide();
        $('.redactor_box').hide();
      }

    }

    // Gets a list of a user's compositions
    $('#compList').click(function() {
      $('#compListDropdown').empty();
      $.ajax({
        url: '/api/compositions/',
        type: 'GET',
        success: function(compositions) {
         for (i = 0; i < compositions.length; i++) {
          if ($("#" + compositions[i]._id).length > 0) {
          }
          else
            $('#compListDropdown').append("<li><a id='" + compositions[i]._id + "' class=\"selectComp\" href='#'>" + compositions[i].title + "</a></li>");
        }
      }
    });
      return true;
    });

    // Creates a composition
    $('form.createCompositionForm').submit(function() {
      if ($('#newTitle').val() != '') {
        $.ajax({
          url: '/api/compositions/',
          type: 'POST',
          data: 'title=' + $('#newTitle').val(),
          success: function() {}
        });
        $('#newTitle').val('');
        $("#createComposition").modal("hide");
      }
      else {
        alert('You must enter a title');
      }
      return false;
    });

    // Get composition with id
    $('#compListDropdown').on('click', 'a.selectComp', function() {
      $.ajax({
        url: '/api/compositions/' + event.target.id,
        type: 'GET',
        success: function(composition) {
          $('#renameField').val(composition.title);
          $('#redactor').prev().empty().append(composition.content);
          updateCurrentComposition(composition._id);
        }
      });
      return true;
    });

    // Autosave / Update composition with id
    setInterval(autosave, 5000);
    function autosave() {
      if ($('#renameField').val() == '') {

      }
      else {
        current_title = $('#renameField').val();
        current_text = $('#redactor').prev().html();

        if (cached_text != current_text || cached_title != current_title) {
          $.ajax({
            url: '/api/compositions/' + currentComposition,
            type: 'PUT',
            data: 'title=' + current_title + '&content=' + current_text,
            success: function() {}
          });
          cached_text = current_text;
          cached_title = current_title;
        }
      }
    }

    // Delete composition with id
    $('form.deleteCompositionForm').submit(function() {
      $.ajax({
        url: '/api/compositions/' + currentComposition,
        type: 'DELETE',
        success: function() {}
      });
      $("#deleteComposition").modal("hide");
      updateCurrentComposition('');
      return false;
    });

  </script>
</html>